<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="314" onload="init(evt)" viewBox="0 0 1200 314" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="314" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">/csl/yoav.gold/hw_sw_project/.venv_dbg/bin/py-spy record -o mdp_results_11_10/mdp_opt2/20251011_154859/flamegraph/flamegraph_pyspy_mdp_opt2.svg -r 100 -- ../.venv_dbg/bin/python3 mdp_opt2.py 100</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="303.00"> </text><svg id="frames" x="10" width="1180" total_samples="5055"><g><title>topoSort (mdp_opt2.py:12) (7 samples, 0.14%)</title><rect x="0.2176%" y="132" width="0.1385%" height="15" fill="rgb(227,0,7)" fg:x="11" fg:w="7"/><text x="0.4676%" y="142.50"></text></g><g><title>topoSort (mdp_opt2.py:14) (13 samples, 0.26%)</title><rect x="0.3561%" y="132" width="0.2572%" height="15" fill="rgb(217,0,24)" fg:x="18" fg:w="13"/><text x="0.6061%" y="142.50"></text></g><g><title>getSuccessorsList (mdp_opt2.py:188) (6 samples, 0.12%)</title><rect x="0.8704%" y="148" width="0.1187%" height="15" fill="rgb(221,193,54)" fg:x="44" fg:w="6"/><text x="1.1204%" y="158.50"></text></g><g><title>_applyActionSide1 (mdp_opt2.py:74) (20 samples, 0.40%)</title><rect x="1.3056%" y="228" width="0.3956%" height="15" fill="rgb(248,212,6)" fg:x="66" fg:w="20"/><text x="1.5556%" y="238.50"></text></g><g><title>applyHPChange (mdp_opt2.py:56) (19 samples, 0.38%)</title><rect x="1.3254%" y="244" width="0.3759%" height="15" fill="rgb(208,68,35)" fg:x="67" fg:w="19"/><text x="1.5754%" y="254.50"></text></g><g><title>_replace (collections/__init__.py:431) (12 samples, 0.24%)</title><rect x="1.4639%" y="260" width="0.2374%" height="15" fill="rgb(232,128,0)" fg:x="74" fg:w="12"/><text x="1.7139%" y="270.50"></text></g><g><title>_applyActionPair (mdp_opt2.py:122) (24 samples, 0.47%)</title><rect x="1.2463%" y="196" width="0.4748%" height="15" fill="rgb(207,160,47)" fg:x="63" fg:w="24"/><text x="1.4963%" y="206.50"></text></g><g><title>_applyAction (mdp_opt2.py:94) (22 samples, 0.44%)</title><rect x="1.2859%" y="212" width="0.4352%" height="15" fill="rgb(228,23,34)" fg:x="65" fg:w="22"/><text x="1.5359%" y="222.50"></text></g><g><title>_getSuccessorsB (mdp_opt2.py:139) (35 samples, 0.69%)</title><rect x="1.1869%" y="180" width="0.6924%" height="15" fill="rgb(218,30,26)" fg:x="60" fg:w="35"/><text x="1.4369%" y="190.50"></text></g><g><title>_applyActionSide1 (mdp_opt2.py:81) (6 samples, 0.12%)</title><rect x="1.9980%" y="228" width="0.1187%" height="15" fill="rgb(220,122,19)" fg:x="101" fg:w="6"/><text x="2.2480%" y="238.50"></text></g><g><title>applyHPChange (mdp_opt2.py:55) (47 samples, 0.93%)</title><rect x="2.5124%" y="244" width="0.9298%" height="15" fill="rgb(250,228,42)" fg:x="127" fg:w="47"/><text x="2.7624%" y="254.50"></text></g><g><title>_make (collections/__init__.py:422) (69 samples, 1.36%)</title><rect x="4.7478%" y="276" width="1.3650%" height="15" fill="rgb(240,193,28)" fg:x="240" fg:w="69"/><text x="4.9978%" y="286.50"></text></g><g><title>_replace (collections/__init__.py:431) (120 samples, 2.37%)</title><rect x="3.8576%" y="260" width="2.3739%" height="15" fill="rgb(216,20,37)" fg:x="195" fg:w="120"/><text x="4.1076%" y="270.50">_r..</text></g><g><title>_make (collections/__init__.py:423) (6 samples, 0.12%)</title><rect x="6.1128%" y="276" width="0.1187%" height="15" fill="rgb(206,188,39)" fg:x="309" fg:w="6"/><text x="6.3628%" y="286.50"></text></g><g><title>_applyActionSide1 (mdp_opt2.py:87) (203 samples, 4.02%)</title><rect x="2.2354%" y="228" width="4.0158%" height="15" fill="rgb(217,207,13)" fg:x="113" fg:w="203"/><text x="2.4854%" y="238.50">_app..</text></g><g><title>applyHPChange (mdp_opt2.py:56) (142 samples, 2.81%)</title><rect x="3.4421%" y="244" width="2.8091%" height="15" fill="rgb(231,73,38)" fg:x="174" fg:w="142"/><text x="3.6921%" y="254.50">ap..</text></g><g><title>_applyActionSide1 (mdp_opt2.py:88) (9 samples, 0.18%)</title><rect x="6.2512%" y="228" width="0.1780%" height="15" fill="rgb(225,20,46)" fg:x="316" fg:w="9"/><text x="6.5012%" y="238.50"></text></g><g><title>_applyAction (mdp_opt2.py:97) (276 samples, 5.46%)</title><rect x="1.9782%" y="212" width="5.4599%" height="15" fill="rgb(210,31,41)" fg:x="100" fg:w="276"/><text x="2.2282%" y="222.50">_applyA..</text></g><g><title>_applyActionSide1 (mdp_opt2.py:89) (51 samples, 1.01%)</title><rect x="6.4293%" y="228" width="1.0089%" height="15" fill="rgb(221,200,47)" fg:x="325" fg:w="51"/><text x="6.6793%" y="238.50"></text></g><g><title>_applyActionPair (mdp_opt2.py:122) (295 samples, 5.84%)</title><rect x="1.8793%" y="196" width="5.8358%" height="15" fill="rgb(226,26,5)" fg:x="95" fg:w="295"/><text x="2.1293%" y="206.50">_applyA..</text></g><g><title>_applyAction (mdp_opt2.py:98) (14 samples, 0.28%)</title><rect x="7.4382%" y="212" width="0.2770%" height="15" fill="rgb(249,33,26)" fg:x="376" fg:w="14"/><text x="7.6882%" y="222.50"></text></g><g><title>&lt;dictcomp&gt; (mdp_opt2.py:98) (10 samples, 0.20%)</title><rect x="7.5173%" y="228" width="0.1978%" height="15" fill="rgb(235,183,28)" fg:x="380" fg:w="10"/><text x="7.7673%" y="238.50"></text></g><g><title>_getSuccessorsB (mdp_opt2.py:141) (315 samples, 6.23%)</title><rect x="1.8793%" y="180" width="6.2315%" height="15" fill="rgb(221,5,38)" fg:x="95" fg:w="315"/><text x="2.1293%" y="190.50">_getSucc..</text></g><g><title>_applyActionPair (mdp_opt2.py:129) (12 samples, 0.24%)</title><rect x="7.8734%" y="196" width="0.2374%" height="15" fill="rgb(247,18,42)" fg:x="398" fg:w="12"/><text x="8.1234%" y="206.50"></text></g><g><title>getSuccessors (mdp_opt2.py:176) (366 samples, 7.24%)</title><rect x="1.1276%" y="164" width="7.2404%" height="15" fill="rgb(241,131,45)" fg:x="57" fg:w="366"/><text x="1.3776%" y="174.50">getSuccess..</text></g><g><title>_getSuccessorsB (mdp_opt2.py:147) (13 samples, 0.26%)</title><rect x="8.1108%" y="180" width="0.2572%" height="15" fill="rgb(249,31,29)" fg:x="410" fg:w="13"/><text x="8.3608%" y="190.50"></text></g><g><title>&lt;lambda&gt; (mdp_opt2.py:147) (7 samples, 0.14%)</title><rect x="8.2295%" y="196" width="0.1385%" height="15" fill="rgb(225,111,53)" fg:x="416" fg:w="7"/><text x="8.4795%" y="206.50"></text></g><g><title>applyHPChange (mdp_opt2.py:55) (15 samples, 0.30%)</title><rect x="8.6251%" y="228" width="0.2967%" height="15" fill="rgb(238,160,17)" fg:x="436" fg:w="15"/><text x="8.8751%" y="238.50"></text></g><g><title>_make (collections/__init__.py:422) (16 samples, 0.32%)</title><rect x="9.2186%" y="260" width="0.3165%" height="15" fill="rgb(214,148,48)" fg:x="466" fg:w="16"/><text x="9.4686%" y="270.50"></text></g><g><title>_applyActionSide1 (mdp_opt2.py:87) (53 samples, 1.05%)</title><rect x="8.5064%" y="212" width="1.0485%" height="15" fill="rgb(232,36,49)" fg:x="430" fg:w="53"/><text x="8.7564%" y="222.50"></text></g><g><title>applyHPChange (mdp_opt2.py:56) (32 samples, 0.63%)</title><rect x="8.9219%" y="228" width="0.6330%" height="15" fill="rgb(209,103,24)" fg:x="451" fg:w="32"/><text x="9.1719%" y="238.50"></text></g><g><title>_replace (collections/__init__.py:431) (27 samples, 0.53%)</title><rect x="9.0208%" y="244" width="0.5341%" height="15" fill="rgb(229,88,8)" fg:x="456" fg:w="27"/><text x="9.2708%" y="254.50"></text></g><g><title>_applyAction (mdp_opt2.py:94) (64 samples, 1.27%)</title><rect x="8.4471%" y="196" width="1.2661%" height="15" fill="rgb(213,181,19)" fg:x="427" fg:w="64"/><text x="8.6971%" y="206.50"></text></g><g><title>applyHPChange (mdp_opt2.py:55) (16 samples, 0.32%)</title><rect x="9.7923%" y="228" width="0.3165%" height="15" fill="rgb(254,191,54)" fg:x="495" fg:w="16"/><text x="10.0423%" y="238.50"></text></g><g><title>_make (collections/__init__.py:422) (28 samples, 0.55%)</title><rect x="10.4253%" y="260" width="0.5539%" height="15" fill="rgb(241,83,37)" fg:x="527" fg:w="28"/><text x="10.6753%" y="270.50"></text></g><g><title>_applyActionSide1 (mdp_opt2.py:87) (63 samples, 1.25%)</title><rect x="9.7725%" y="212" width="1.2463%" height="15" fill="rgb(233,36,39)" fg:x="494" fg:w="63"/><text x="10.0225%" y="222.50"></text></g><g><title>applyHPChange (mdp_opt2.py:56) (46 samples, 0.91%)</title><rect x="10.1088%" y="228" width="0.9100%" height="15" fill="rgb(226,3,54)" fg:x="511" fg:w="46"/><text x="10.3588%" y="238.50"></text></g><g><title>_replace (collections/__init__.py:431) (44 samples, 0.87%)</title><rect x="10.1484%" y="244" width="0.8704%" height="15" fill="rgb(245,192,40)" fg:x="513" fg:w="44"/><text x="10.3984%" y="254.50"></text></g><g><title>_applyAction (mdp_opt2.py:97) (83 samples, 1.64%)</title><rect x="9.7132%" y="196" width="1.6419%" height="15" fill="rgb(238,167,29)" fg:x="491" fg:w="83"/><text x="9.9632%" y="206.50"></text></g><g><title>_applyActionSide1 (mdp_opt2.py:89) (15 samples, 0.30%)</title><rect x="11.0584%" y="212" width="0.2967%" height="15" fill="rgb(232,182,51)" fg:x="559" fg:w="15"/><text x="11.3084%" y="222.50"></text></g><g><title>_getSuccessorsC (mdp_opt2.py:153) (161 samples, 3.18%)</title><rect x="8.3877%" y="180" width="3.1850%" height="15" fill="rgb(231,60,39)" fg:x="424" fg:w="161"/><text x="8.6377%" y="190.50">_ge..</text></g><g><title>_applyAction (mdp_opt2.py:98) (11 samples, 0.22%)</title><rect x="11.3551%" y="196" width="0.2176%" height="15" fill="rgb(208,69,12)" fg:x="574" fg:w="11"/><text x="11.6051%" y="206.50"></text></g><g><title>&lt;dictcomp&gt; (mdp_opt2.py:98) (10 samples, 0.20%)</title><rect x="11.3749%" y="212" width="0.1978%" height="15" fill="rgb(235,93,37)" fg:x="575" fg:w="10"/><text x="11.6249%" y="222.50"></text></g><g><title>_getSuccessorsC (mdp_opt2.py:160) (6 samples, 0.12%)</title><rect x="11.6914%" y="180" width="0.1187%" height="15" fill="rgb(213,116,39)" fg:x="591" fg:w="6"/><text x="11.9414%" y="190.50"></text></g><g><title>getSuccessors (mdp_opt2.py:178) (213 samples, 4.21%)</title><rect x="8.3680%" y="164" width="4.2136%" height="15" fill="rgb(222,207,29)" fg:x="423" fg:w="213"/><text x="8.6180%" y="174.50">getSu..</text></g><g><title>_getSuccessorsC (mdp_opt2.py:161) (39 samples, 0.77%)</title><rect x="11.8101%" y="180" width="0.7715%" height="15" fill="rgb(206,96,30)" fg:x="597" fg:w="39"/><text x="12.0601%" y="190.50"></text></g><g><title>&lt;lambda&gt; (mdp_opt2.py:161) (14 samples, 0.28%)</title><rect x="12.3046%" y="196" width="0.2770%" height="15" fill="rgb(218,138,4)" fg:x="622" fg:w="14"/><text x="12.5546%" y="206.50"></text></g><g><title>getSuccessorsList (mdp_opt2.py:192) (594 samples, 11.75%)</title><rect x="1.0089%" y="148" width="11.7507%" height="15" fill="rgb(250,191,14)" fg:x="51" fg:w="594"/><text x="1.2589%" y="158.50">getSuccessorsList..</text></g><g><title>topoSort (mdp_opt2.py:17) (614 samples, 12.15%)</title><rect x="0.6726%" y="132" width="12.1464%" height="15" fill="rgb(239,60,40)" fg:x="34" fg:w="614"/><text x="0.9226%" y="142.50">topoSort (mdp_opt2..</text></g><g><title>evaluate (mdp_opt2.py:205) (640 samples, 12.66%)</title><rect x="0.2176%" y="116" width="12.6607%" height="15" fill="rgb(206,27,48)" fg:x="11" fg:w="640"/><text x="0.4676%" y="126.50">evaluate (mdp_opt2...</text></g><g><title>evaluate (mdp_opt2.py:208) (22 samples, 0.44%)</title><rect x="12.9179%" y="116" width="0.4352%" height="15" fill="rgb(225,35,8)" fg:x="653" fg:w="22"/><text x="13.1679%" y="126.50"></text></g><g><title>evaluate (mdp_opt2.py:209) (264 samples, 5.22%)</title><rect x="13.3531%" y="116" width="5.2226%" height="15" fill="rgb(250,213,24)" fg:x="675" fg:w="264"/><text x="13.6031%" y="126.50">evalua..</text></g><g><title>getSuccessors (mdp_opt2.py:165) (267 samples, 5.28%)</title><rect x="20.4154%" y="132" width="5.2819%" height="15" fill="rgb(247,123,22)" fg:x="1032" fg:w="267"/><text x="20.6654%" y="142.50">getSuc..</text></g><g><title>getSuccessors (mdp_opt2.py:166) (9 samples, 0.18%)</title><rect x="25.6973%" y="132" width="0.1780%" height="15" fill="rgb(231,138,38)" fg:x="1299" fg:w="9"/><text x="25.9473%" y="142.50"></text></g><g><title>evaluate (mdp_opt2.py:211) (394 samples, 7.79%)</title><rect x="18.5757%" y="116" width="7.7943%" height="15" fill="rgb(231,145,46)" fg:x="939" fg:w="394"/><text x="18.8257%" y="126.50">evaluate (m..</text></g><g><title>getSuccessors (mdp_opt2.py:167) (25 samples, 0.49%)</title><rect x="25.8754%" y="132" width="0.4946%" height="15" fill="rgb(251,118,11)" fg:x="1308" fg:w="25"/><text x="26.1254%" y="142.50"></text></g><g><title>evaluate (mdp_opt2.py:213) (23 samples, 0.45%)</title><rect x="26.3699%" y="116" width="0.4550%" height="15" fill="rgb(217,147,25)" fg:x="1333" fg:w="23"/><text x="26.6199%" y="126.50"></text></g><g><title>evaluate (mdp_opt2.py:215) (37 samples, 0.73%)</title><rect x="26.8249%" y="116" width="0.7319%" height="15" fill="rgb(247,81,37)" fg:x="1356" fg:w="37"/><text x="27.0749%" y="126.50"></text></g><g><title>evaluate (mdp_opt2.py:216) (39 samples, 0.77%)</title><rect x="27.5569%" y="116" width="0.7715%" height="15" fill="rgb(209,12,38)" fg:x="1393" fg:w="39"/><text x="27.8069%" y="126.50"></text></g><g><title>evaluate (mdp_opt2.py:217) (35 samples, 0.69%)</title><rect x="28.3284%" y="116" width="0.6924%" height="15" fill="rgb(227,1,9)" fg:x="1432" fg:w="35"/><text x="28.5784%" y="126.50"></text></g><g><title>evaluate (mdp_opt2.py:218) (116 samples, 2.29%)</title><rect x="29.0208%" y="116" width="2.2948%" height="15" fill="rgb(248,47,43)" fg:x="1467" fg:w="116"/><text x="29.2708%" y="126.50">e..</text></g><g><title>evaluate (mdp_opt2.py:219) (127 samples, 2.51%)</title><rect x="31.3155%" y="116" width="2.5124%" height="15" fill="rgb(221,10,30)" fg:x="1583" fg:w="127"/><text x="31.5655%" y="126.50">ev..</text></g><g><title>evaluate (mdp_opt2.py:220) (20 samples, 0.40%)</title><rect x="33.8279%" y="116" width="0.3956%" height="15" fill="rgb(210,229,1)" fg:x="1710" fg:w="20"/><text x="34.0779%" y="126.50"></text></g><g><title>evaluate (mdp_opt2.py:221) (9 samples, 0.18%)</title><rect x="34.2235%" y="116" width="0.1780%" height="15" fill="rgb(222,148,37)" fg:x="1730" fg:w="9"/><text x="34.4735%" y="126.50"></text></g><g><title>evaluate (mdp_opt2.py:223) (147 samples, 2.91%)</title><rect x="34.4807%" y="116" width="2.9080%" height="15" fill="rgb(234,67,33)" fg:x="1743" fg:w="147"/><text x="34.7307%" y="126.50">ev..</text></g><g><title>evaluate (mdp_opt2.py:228) (182 samples, 3.60%)</title><rect x="37.5470%" y="116" width="3.6004%" height="15" fill="rgb(247,98,35)" fg:x="1898" fg:w="182"/><text x="37.7970%" y="126.50">eval..</text></g><g><title>evaluate (mdp_opt2.py:229) (1,102 samples, 21.80%)</title><rect x="41.1474%" y="116" width="21.8002%" height="15" fill="rgb(247,138,52)" fg:x="2080" fg:w="1102"/><text x="41.3974%" y="126.50">evaluate (mdp_opt2.py:229)</text></g><g><title>evaluate (mdp_opt2.py:230) (1,141 samples, 22.57%)</title><rect x="62.9476%" y="116" width="22.5717%" height="15" fill="rgb(213,79,30)" fg:x="3182" fg:w="1141"/><text x="63.1976%" y="126.50">evaluate (mdp_opt2.py:230)</text></g><g><title>evaluate (mdp_opt2.py:231) (24 samples, 0.47%)</title><rect x="85.5193%" y="116" width="0.4748%" height="15" fill="rgb(246,177,23)" fg:x="4323" fg:w="24"/><text x="85.7693%" y="126.50"></text></g><g><title>evaluate (mdp_opt2.py:232) (156 samples, 3.09%)</title><rect x="85.9941%" y="116" width="3.0861%" height="15" fill="rgb(230,62,27)" fg:x="4347" fg:w="156"/><text x="86.2441%" y="126.50">eva..</text></g><g><title>evaluate (mdp_opt2.py:234) (549 samples, 10.86%)</title><rect x="89.0801%" y="116" width="10.8605%" height="15" fill="rgb(216,154,8)" fg:x="4503" fg:w="549"/><text x="89.3301%" y="126.50">evaluate (mdp_op..</text></g><g><title>all (5,055 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(244,35,45)" fg:x="0" fg:w="5055"/><text x="0.2500%" y="62.50"></text></g><g><title>&lt;module&gt; (mdp_opt2.py:262) (5,055 samples, 100.00%)</title><rect x="0.0000%" y="68" width="100.0000%" height="15" fill="rgb(251,115,12)" fg:x="0" fg:w="5055"/><text x="0.2500%" y="78.50">&lt;module&gt; (mdp_opt2.py:262)</text></g><g><title>main (mdp_opt2.py:258) (5,055 samples, 100.00%)</title><rect x="0.0000%" y="84" width="100.0000%" height="15" fill="rgb(240,54,50)" fg:x="0" fg:w="5055"/><text x="0.2500%" y="94.50">main (mdp_opt2.py:258)</text></g><g><title>bench_mdp (mdp_opt2.py:249) (5,055 samples, 100.00%)</title><rect x="0.0000%" y="100" width="100.0000%" height="15" fill="rgb(233,84,52)" fg:x="0" fg:w="5055"/><text x="0.2500%" y="110.50">bench_mdp (mdp_opt2.py:249)</text></g></svg></svg>